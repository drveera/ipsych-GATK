#!/bin/env snakemake
from os.path import basename

########USER PARAMS##################
rg = config['--ref-genome']
if rg:
    bwa_ref = rg
else:
    bwa_ref = '/data/refseq/tooldata/GATKbundle/2.8/b37/human_g1k_v37.fasta'
out = config['--out']
#################WILDCARD##########
#bwa_fq = config['--fqlist']
#bwa_fq = process_list(bwa_fq)
bwa_fq = config['gvcflist']

rawsam = out + "_indv_files/{wcard}/{wcard}.sam"
rawsam_ok = out + "_indv_files/{wcard}/.{wcard}.sam.ok"

cleanedsam = out + "_indv_files/{wcard}/{wcard}.cleanedSam"
cleanedsam_ok = out + "_indv_files/{wcard}/.{wcard}.cleanedSam.ok"
###################################
#fq1 = lambda wildcards: bwa_fq["{wildcards.wcard}"][0]
#fq2 = lambda wildcards: bwa_fq["{wildcards.wcard}"][1]
fq2 = "{wcard}.fq2"
sai1 = out + "_indv_files/{wcard}/{wcard}.fq1.sai"
sai1_ok = out + "_indv_files/{wcard}/.{wcard}.fq1.sai.ok"
sai2 =  out + "_indv_files/{wcard}/{wcard}.fq2.sai"
sai2_ok = out + "_indv_files/{wcard}/.{wcard}.fq2.sai.ok"

rule gseq_bwa_all:
    input: expand(cleanedsam, wcard = bwa_fq)

rule gseq_bwa_aln_read1:
    input: a = lambda wildcards: bwa_fq[wildcards.wcard], r = bwa_ref
    output: a = sai1, b = sai1_ok
    shell: "bwa aln -t 4 {input.r} {input.a} > {output.a} && touch {output.b}"

rule gseq_bwa_aln_read2:
    input: b = lambda wildcards: bwa_fq[wildcards.wcard], r = bwa_ref
    output: a = sai2, b = sai2_ok
    shell: "bwa aln -t 4 {input.r} {input.b} > {output.a} && touch {output.b}"

rule gseq_bwa_align:
    input: a = temp(sai1), a_ok = temp(sai1_ok), b= temp(sai2), b_ok = temp(sai2_ok), c = lambda wildcards: bwa_fq[wildcards.wcard][0], d = lambda wildcards: bwa_fq[wildcards.wcard][1], r = bwa_ref
    params: lambda wildcards: basename(wildcards.wcard)
    output: a = temp(rawsam), b = temp(rawsam_ok)
    shell: "bwa sampe -r '@RG\tID:{params}\tSM:{params}\tPL:ILLUMINA\tLB:iPsych' "
           "{input.r} {input.a} {input.b}  {input.c} {input.d} > {output.a} && touch {output.b}"
           
rule picard_clean:
    input: a = rawsam, ok = rawsam_ok
    output: a = temp(cleanedsam), ok = temp(cleanedsam_ok)
    shell:
        "picard CleanSam "
        "INPUT={input.a} OUTPUT={output.a} && touch {output.ok}"
