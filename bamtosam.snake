#!/bin/env snakemake
from os.path import basename

out = config['--out']
bamfile = config['gvcflist']
infilebam = "{wcard}.bam"
infilesam = out + "_indv_files/{wcard}/{wcard}.unclean.sam"
infilesam_ok = out + "_indv_files/{wcard}/.{wcard}.unclean.sam.ok"
cleanedsam = out + "_indv_files/{wcard}/{wcard}.cleanedsam"
cleanedsam_ok = out + "_indv_files/{wcard}/.{wcard}.cleanedsam.ok"

infileRGsam = out + "_indv_files/{wcard}/{wcard}.sam"
infileRGsam_ok = out + "_indv_files/{wcard}/.{wcard}.sam.ok"



rule all:
    input: expand(infileRGsam,wcard = bamfile)

rule bamtosam:
    input: a = lambda wildcards: bamfile[wildcards.wcard]
    output: a = temp(infilesam), ok = infilesam_ok
    shell:"samtools view -h -o {output.a} {input} && touch {output.ok}"

rule cleansam:
    input: a = infilesam, ok = infilesam_ok
    output: a = temp(cleanedsam), ok = temp(cleanedsam_ok)
    shell:
        "picard CleanSam "
        "INPUT={input.a} OUTPUT={output.a} && touch {output.ok}"
    
rule addreadGroup:
    input: a = cleanedsam, ok = cleanedsam_ok
    output: a = temp(infileRGsam), ok = temp(infileRGsam_ok)
    params: lambda wildcards: basename(wildcards.wcard)
    shell:
        "picard AddOrReplaceReadGroups I={input.a} O={output.a} "
        "RGID={params} RGSM={params} RGLB=iPSYCH RGPL=ILLUMINA RGPU=ILLUMINA && touch {output.ok}"
